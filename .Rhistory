n1.rep <- n1 %>% filter(dates == max(dates))
n1.rep
n1.rep %>% mutate(
dates = dates + 7,
dates.end = dates.end + 7
)
n1.rep
str(n1)
tmp <- bind_rows(n1, n1.rep)
str(tmp)
n1 <- bind_rows(n1, n1.rep) %>%
arrange(dates)
str(n1)
tail(n1)
max(n1$dates)
max(n1$dates.end)
str(dates)
n1.rep
# load data
n1rank <- read.csv(atpRanking.file, check.names = F, row.names = 1)
nat <- read.csv(n1_nationality.file, stringsAsFactors = F)
nat <- structure(nat[,2], names = nat[,1])
# convert to zoo
zn1 <- zoo(as.matrix(n1rank), as.Date(row.names(n1rank), format = "%m/%d/%Y"))
dates <- index(zn1)
date.reg <- c(seq(min(dates), max(dates), 7))
date.reg <- date.reg[order(date.reg)]
## hack the last date!!
if(hackLastDate) date.reg <- c(date.reg, max(dates))
idx <- findInterval(date.reg, index(zn1), rightmost.closed = FALSE, all.inside = FALSE)
eq.zn1 <- zoo(unclass(zn1)[idx,], date.reg)
stopifnot(!any(duplicated(index(eq.zn1))) )
ranks <- max(eq.zn1, na.rm =T)
# ugly hack to fill ranking before 1985
dateLabel <- rep("", length(date.reg))
ii <- which(!duplicated(format(date.reg, format = "%Y")))
dateLabel[ii[-1]] <- format(date.reg[ii[-1]], "%Y")
dateLabel[ii[1]] <- format(date.reg[ii[1]], "%Y-%m-%d")
# tranform back zoo to data.frame for ggplot2
n1 <- as.data.frame(eq.zn1)
n1 <- cbind(dates = as.Date(as.character(rownames(n1))), n1)
rownames(n1) <- NULL
n1 %<>% gather(player, rank, -dates)
n1$lrank <- log10(n1$rank)
# order data.frame by chronological order of players when they reached n1
n1.dates <- n1 %>%
group_by(player) %>% summarise(first1 = dates[min(which(rank == 1))]) %>%
ungroup() %>% arrange(first1)
#  make ordered factor player
n1$player <- factor(n1$player, levels = rev(n1.dates$player))
# check dates spacing
if(!hackLastDate) stopifnot(all(diff(unique(n1$dates))==7))
narow <- n1 %>% group_by(dates) %>%
summarise(narow = all(is.na(rank))) %>% ungroup()
naidx <- which(narow %>% select(narow) %>% unlist())
if(length(naidx)>0) {
warning(narow[naidx,], " hack will ensue")
naDates <- as.Date(unlist(narow[naidx,'dates']), use.names = F)
n1$dates.end <- n1$dates + 7
# for NA dates, discard data and add a week to dates.end
n1 %<>% filter(!dates %in% naDates)
n1[which(n1$dates %in% (naDates-7)), 'dates.end'] <- n1[which(n1$dates %in% (naDates-7)), 'dates.end'] + 7
}
if(hackRepeatLastWeek) {
n1.rep <- n1 %>% filter(dates == max(dates))
n1.rep %<>% mutate(
dates = dates + 7,
dates.end = dates.end + 7
)
n1 <- bind_rows(n1, n1.rep) %>%
arrange(dates)
}
tail(n1)
library(zoo)
library(dplyr)
library(magrittr)
library(tidyr)
library(ggplot2)
library(scales)
library(swiTheme)
library(htmltools)
library(swiRcharts)
library(RColorBrewer)
hackLastDate <- T
hackRepeatLastWeek <- T
atpRanking.file <- "input/alln1_ATP_ranking.csv"
n1_nationality.file <- "input/alln1_nationlity.csv"
dob.file < "input/alln1_dob.csv"
library(zoo)
library(dplyr)
library(magrittr)
library(tidyr)
library(ggplot2)
library(scales)
library(swiTheme)
library(htmltools)
library(swiRcharts)
library(RColorBrewer)
hackLastDate <- T
hackRepeatLastWeek <- T
atpRanking.file <- "input/alln1_ATP_ranking.csv"
n1_nationality.file <- "input/alln1_nationlity.csv"
dob.file <- "input/alln1_dob.csv"
trad.file <- "input/All n°1 ATP ranking heatmap - Sheet1.csv"
annotation.file <- "input/All n°1 ATP ranking heatmap - annotations.csv"
if(exists("trad.file")) {
txt <- read.csv(trad.file, row.names = 1, stringsAsFactors = F)
# discard incomplete translations
cidx <- unique(which(txt =="" | is.na(txt), T)[,2])
if(length(cidx > 0)) {
warning(paste(colnames(txt)[cidx], collapse = "\t"), " languages will be discarded!", "\n")
txt <- txt[,-cidx, drop = F]
}
colnames(txt)
}
if(exists("annotation.file")) {
annot <- read.csv(annotation.file, row.names = 1, stringsAsFactors = F)
stopifnot(all(rownames(annot) %in% rownames(txt)))
annot$x <- as.Date(paste0(annot$x, "-01-01"))
annot$x0 <- as.Date(paste0(annot$x0, "-06-01"))
annot$x1 <- as.Date(paste0(annot$x1, "-06-01"))
}
setwd("~/swissinfo/2016_Q4/2016_06_14_tennisATP")
n1rank <- read.csv(atpRanking.file, check.names = F, row.names = 1)
n1rank
nat <- read.csv(n1_nationality.file, stringsAsFactors = F)
nat <- structure(nat[,2], names = nat[,1])
zn1 <- zoo(as.matrix(n1rank), as.Date(row.names(n1rank), format = "%m/%d/%Y"))
dates <- index(zn1)
dates
n1rank <- read.csv(atpRanking.file, check.names = F, row.names = 1)
nat <- read.csv(n1_nationality.file, stringsAsFactors = F)
nat <- structure(nat[,2], names = nat[,1])
n1rank
zn1 <- zoo(as.matrix(n1rank), as.Date(row.names(n1rank), format = "%m/%d/%Y"))
dates <- index(zn1)
zn1
dates
nat
dob <- read_csv(dob.file)
dob
dob <- read_csv(dob.file) %>% deframe()
dob
read_csv(dob.file
)
dob <- read_csv(dob.file) %>%
mutate(x = as.Date("%y.%m.%d")) %>%
deframe()
as.Date(dob,"%y.%m.%d")
dob
as.Date(dob,"%Y.%m.%d")
dob <- read_csv(dob.file) %>%
deframe()
dob <- as.Date(dob,"%Y.%m.%d")
dob
dob <- read_csv(dob.file) %>%
deframe()
dob
dob <- read_csv(dob.file) %>%
mutate(x = as.Date("%Y.%m.%d")) %>%
deframe()
dob
read_csv(dob.file) %>%
mutate(x = as.Date("%Y.%m.%d"))
read_csv(dob.file) %>%
mutate(x = as.Date("%Y.%m.%d"))
read_csv(dob.file) %>%
mutate(x = as.Date(x, "%Y.%m.%d")) %>%
deframe()
dob <- read_csv(dob.file) %>%
mutate(x = as.Date(x, "%Y.%m.%d")) %>%
deframe()
dob
str(dob)
str(n1rank)
zn1
n1rank
as.Date(row.names(n1rank)
)
as.Date(row.names(n1rank))
as.Date(row.names(n1rank), format = "%m/%d/%Y")
as.Date(row.names(n1rank), format = "%m/%d/%Y")
dob
names(dob)
dates_ranking <- as.Date(row.names(n1rank), format = "%m/%d/%Y")
dates_ranking
n1rank
n1rank[,'Roger Federer']
dates_ranking
dob
n1age<- names(dob) %>% map_df(function(player) {
tibble(
age = dates_ranking - dob[which(names(dob) == player)],
rank =  n1rank[,player]
)
})
n1age
n1age <- names(dob) %>% map_df(function(player) {
tibble(
player = player,
age = dates_ranking - dob[which(names(dob) == player)],
rank =  n1rank[,player]
)
})
player <- "Roger Federer"
tibble(
player = player,
age = dates_ranking - dob[which(names(dob) == player)],
rank =  n1rank[,player]
)
tibble(
#player = player,
age = dates_ranking - dob[which(names(dob) == player)],
rank =  n1rank[,player]
)
tibble(
#player = player,
age = as.numeric(difftime(dates_ranking - dob[which(names(dob) == player)], units = "weeks"))/52.25,
rank =  n1rank[,player]
)
difftime(dates_ranking - dob[which(names(dob) == player)], units = "weeks")
dates_ranking - dob[which(names(dob) == player)]
difftime(dates_ranking - dob[which(names(dob) == player)], units = "weeks")
dates_ranking - dob[which(names(dob) == player)]
str(dates_ranking - dob[which(names(dob) == player)])
tibble(
#player = player,
age = as.numeric(difftime(dates_ranking, dob[which(names(dob) == player)], units = "weeks"))/52.25,
rank =  n1rank[,player]
)
n1age <- names(dob) %>% map_df(function(player) {
tibble(
player = rep(player, nrow(n1rank)),
age = as.numeric(difftime(dates_ranking, dob[which(names(dob) == player)], units = "weeks"))/52.25,
rank =  n1rank[,player]
)
})
n1age <- names(dob) %>% map_df(function(player) {
tibble(
# player = rep(player, nrow(n1rank)),
age = as.numeric(difftime(dates_ranking, dob[which(names(dob) == player)], units = "weeks"))/52.25,
rank =  n1rank[,player]
)
})
n1age
str(player)
nrow(n1rank)
n1age <- names(dob) %>% map_df(function(player) {
tibble(
player = rep(player, nrow(n1rank)),
age = as.numeric(difftime(dates_ranking, dob[which(names(dob) == player)], units = "weeks"))/52.25,
rank =  n1rank[,player]
)
})
n1rank[,player]
as.numeric(difftime(dates_ranking, dob[which(names(dob) == player)], units = "weeks"))/52.25
rep(player, nrow(n1rank))
length(n1rank[,player] )
rep(player, nrow(n1rank))
str(rep(player, nrow(n1rank)))
n1age <- names(dob) %>% map_df(function(player) {
data.frame(
player = player,
age = as.numeric(difftime(dates_ranking, dob[which(names(dob) == player)], units = "weeks"))/52.25,
rank =  n1rank[,player]
)
})
warnings()
n1age
n1age <- names(dob) %>% map_df(function(player) {
data.frame(
player = player,
age = as.numeric(difftime(dates_ranking, dob[which(names(dob) == player)], units = "weeks"))/52.25,
rank =  n1rank[,player]
)
}) %>% filter(
age > 0
)
n1age
age.range <- n1age %>%
group_by(player) %>%
summarise(
minAge = age[which.min(!is.na(rank))],
maxAge = age[which.max(!is.na(rank))]
) %>%
ungroup()
age.range
View(age.range)
n1age %>% filter(player == "Roger Federer")
n1age %>% filter(player == "Roger Federer") %>% View()
which.min(!is.na(n1age$rank)
)
head(n1age)
!is.na(n1age$rank)
which.min(!is.na(n1age$rank))
min(!is.na(n1age$rank))
which(!is.na(n1age$rank))
age.range <- n1age %>%
group_by(player) %>%
summarise(
minAge = age[min(which(!is.na(rank)))],
maxAge = age[max(which(!is.na(rank)))]
) %>%
ungroup()
age.range
n1age
dob
head(names(dob), 15)
players <- head(names(dob), 10)
players
rankAge <- n1age %>% filter(player %in% players)
rankAge
age.range
age.range %>% filter(player %in% players)
age.range %>% filter(player %in% players) %>%
summarise(minAge = min(minAge), maxAge = max(mageAge))
age.range %>% filter(player %in% players) %>%
summarise(minAge = min(minAge), maxAge = max(maxAge))
age.range %>% filter(player %in% players) %>%
summarise(minAge = min(minAge), maxAge = max(maxAge)) %>%
deframe()
age.range
age.range %>% View()
age.range %>% filter(player %in% players) %>%
summarise(minAge = min(minAge), maxAge = max(maxAge)) %>%
deframe()
rankAge <- n1age %>% filter(player %in% players)
ageRange.sub <- age.range %>% filter(player %in% players) %>%
summarise(minAge = min(minAge), maxAge = max(maxAge)) %>%
deframe()
ageRange.sub
ageRange.sub <- age.range %>% filter(player %in% players) %>%
summarise(minAge = floor(min(minAge)), maxAge = ceiling(max(maxAge))) %>%
deframe()
ageRange.sub
str(ageRange.sub)
ageRange.sub <- age.range %>% filter(player %in% players) %>%
summarise(minAge = floor(min(minAge)), maxAge = ceiling(max(maxAge))) %>%
unlist()
ageRange.sub
rankAge <- n1age %>% filter(player %in% players)
ageRange.sub <- age.range %>% filter(player %in% players) %>%
summarise(minAge = floor(min(minAge)), maxAge = ceiling(max(maxAge))) %>%
unlist()
rankAge %<>%
filter(age >= ageRange.sub[1] & age <= ageRange.sub[2])
rankAge
str(rankAge)
rankAge <- n1age %>% filter(player %in% players)
ageRange.sub <- age.range %>% filter(player %in% players) %>%
summarise(minAge = floor(min(minAge)), maxAge = ceiling(max(maxAge))) %>%
unlist()
rankAge %<>%
filter(age >= ageRange.sub[1] & age <= ageRange.sub[2]) %>%
mutate(player = factor(player, levels = players))
str(rankAge)
n1r <- do.call(rbind, lapply(1:nlevels(rankAge$player), function(i) {
cbind(
rankAge %>% filter(player == levels(n1$player)[i]),
ymin = rect.y * (i-1),
ymax = (rect.y * (i-1)) + rect.h
)
}))
rect.h <- 11
rect.spacing <- 0.8
rect.y <- rect.h + rect.spacing
plab.offset <- 7 * 23
# define ymin & ymax for geom_rect
n1r <- do.call(rbind, lapply(1:nlevels(rankAge$player), function(i) {
cbind(
rankAge %>% filter(player == levels(n1$player)[i]),
ymin = rect.y * (i-1),
ymax = (rect.y * (i-1)) + rect.h
)
}))
rect.h <- 11
rect.spacing <- 0.8
rect.y <- rect.h + rect.spacing
plab.offset <- 7 * 23
# define ymin & ymax for geom_rect
n1r <- do.call(rbind, lapply(1:nlevels(rankAge$player), function(i) {
cbind(
rankAge %>% filter(player == levels(rankAge$player)[i]),
ymin = rect.y * (i-1),
ymax = (rect.y * (i-1)) + rect.h
)
}))
rect.h <- 11
rect.spacing <- 0.8
rect.y <- rect.h + rect.spacing
plab.offset <- 7 * 23
# define ymin & ymax for geom_rect
n1r <- do.call(rbind, lapply(1:nlevels(rankAge$player), function(i) {
cbind(
rankAge %>% filter(player == levels(rankAge$player)[i]),
ymin = rect.y * (i-1),
ymax = (rect.y * (i-1)) + rect.h
)
}))
n1r %<>% group_by(player) %>% mutate(y = (ymin + ymax + rect.spacing) / 2) %>% ungroup()
n1r
player.lab <- n1r %>% group_by(player, y) %>%
summarise(x = dates[max(which(!is.na(rank)))] + plab.offset) %>% ungroup()
player.lab
n1rank <- read.csv(atpRanking.file, check.names = F, row.names = 1)
nat <- read.csv(n1_nationality.file, stringsAsFactors = F)
nat <- structure(nat[,2], names = nat[,1])
dob <- read_csv(dob.file) %>%
mutate(x = as.Date(x, "%Y.%m.%d")) %>%
deframe()
dates_ranking <- as.Date(row.names(n1rank), format = "%m/%d/%Y")
n1age <- names(dob) %>% map_df(function(player) {
data.frame(
player = player,
days = as.numeric(difftime(dates_ranking, dob[which(names(dob) == player)], units = "days")),
age = days / 365.25,
rank =  n1rank[,player]
)
}) %>% filter(
age > 0
)
age.range <- n1age %>%
group_by(player) %>%
summarise(
minAge = age[min(which(!is.na(rank)))],
maxAge = age[max(which(!is.na(rank)))]
) %>%
ungroup()
players <- head(names(dob), 10)
## subset
rankAge <- n1age %>% filter(player %in% players)
ageRange.sub <- age.range %>% filter(player %in% players) %>%
summarise(minAge = floor(min(minAge)), maxAge = ceiling(max(maxAge))) %>%
unlist()
rankAge %<>%
filter(age >= ageRange.sub[1] & age <= ageRange.sub[2]) %>%
mutate(player = factor(player, levels = players))
n1age <- names(dob) %>% map_df(function(player) {
data.frame(
player = player,
days = as.numeric(difftime(dates_ranking, dob[which(names(dob) == player)], units = "days")),
rank =  n1rank[,player]
) %>%
mutate(age = days / 365.25)
}) %>% filter(age > 0)
n1age
age.range <- n1age %>%
group_by(player) %>%
summarise(
minAge = age[min(which(!is.na(rank)))],
maxAge = age[max(which(!is.na(rank)))]
) %>%
ungroup()
players <- head(names(dob), 10)
## subset
rankAge <- n1age %>% filter(player %in% players)
ageRange.sub <- age.range %>% filter(player %in% players) %>%
summarise(minAge = floor(min(minAge)), maxAge = ceiling(max(maxAge))) %>%
unlist()
rankAge %<>%
filter(age >= ageRange.sub[1] & age <= ageRange.sub[2]) %>%
mutate(player = factor(player, levels = players))
n1r
rankAge
n1r <- do.call(rbind, lapply(1:nlevels(rankAge$player), function(i) {
cbind(
rankAge %>% filter(player == levels(rankAge$player)[i]),
ymin = rect.y * (i-1),
ymax = (rect.y * (i-1)) + rect.h
)
}))
n1r %<>%
group_by(player) %>%
mutate(y = (ymin + ymax + rect.spacing) / 2) %>% ungroup()
n1r
unique(n1r$days)
head(n1r)
n1r %>% group_by(player) %>% mutate(diffday = diff(days))
n1r %>% group_by(player) %>% mutate(diffday = c(NA,diff(days)))
n1r %>% group_by(player) %>% mutate(diffday = c(diff(days), NA))
n1r %<>% group_by(player) %>% mutate(diffday = c(diff(days), NA)) %>% ungroup()
summary(n1r$diffday)
n1r
n1r %>% ggplot2(aes(x = age, y = rank, group = player))
n1r %>% ggplot(aes(x = age, y = rank, group = player))
n1r %>% ggplot(aes(x = age, y = rank, group = player)) %>% geom_point()
n1r %>% ggplot() %>% geom_point(aes(x = age, y = rank, group = player))
str(n1r)
n1r %>% ggplot() %>% geom_point(aes(x = age, y = rank, group = player, colour = player))
n1r %>% ggplot2() +
geom_point(aes(x = age, y = rank, group = player, colour = player))
n1r %>% ggplot() +
geom_point(aes(x = age, y = rank, group = player, colour = player))
reverselog_trans <- function(base = 10) {
trans <- function(x) -log(x, base)
inv <- function(x) base^(-x)
trans_new(paste0("reverselog-", format(base)), trans, inv,
log_breaks(base = base),
domain = c(1e-100, Inf))
}
n1r %>% ggplot() +
geom_point(aes(x = age, y = rank, group = player, colour = player)) + scale_y_continuous(trans=reverselog_trans(10))
n1r %>% ggplot() +
geom_point(aes(x = age, y = rank, group = player, colour = player)) + scale_y_continuous(trans=reverselog_trans(10)) +
geom_step(aes(x = age, y = rank, group = player, colour = player))
n1r %>% ggplot() +
geom_point(aes(x = age, y = rank, group = player, colour = player), size = 0.5) + scale_y_continuous(trans=reverselog_trans(10)) +
geom_step(aes(x = age, y = rank, group = player, colour = player))
n1r %>% ggplot() +
geom_point(aes(x = age, y = rank, group = player, colour = player), size = 0.5) + scale_y_continuous(trans=reverselog_trans(10)) +
geom_step(aes(x = age, y = rank, group = player, colour = player)) +
geom_smooth(aes(x = age, y = rank, group = player, colour = player))
